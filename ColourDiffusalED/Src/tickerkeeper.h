//$file${.::tickerkeeper.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: ColourDiffusal.qm
// File:  ${.::tickerkeeper.h}
//
// This code has been generated by QM 5.3.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::tickerkeeper.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef TICKERKEEPER_H
#define TICKERKEEPER_H

#include "qpc.h"    /* QP/C framework API */
/* ask QM to declare the TickerKeeper class --------------------------------------*/
//$declare${AOs::TickerKeeper} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs::TickerKeeper} .......................................................
typedef struct {
// protected:
    QHsm super;

// private:
    QTimeEvt sensorDataTimeEvent;
    QTimeEvt ledScreenTimeEvent;
    uint16_t screenUpdateRate;
    uint16_t sensorSamplingRate;
} TickerKeeper;

// protected:
QState TickerKeeper_initial(TickerKeeper * const me, void const * const par);
QState TickerKeeper_running(TickerKeeper * const me, QEvt const * const e);
QState TickerKeeper_paused(TickerKeeper * const me, QEvt const * const e);
//$enddecl${AOs::TickerKeeper} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

void TickerKeeper_ctor(TickerKeeper *me);

#define TickerKeeper_init(me_) QHSM_INIT((me_), (QEvt *)0, 0)
#define TickerKeeper_dispatch(me_, e_) QHSM_DISPATCH((me_), (e_), 0)

#endif /* TICKERKEEPER_H */
